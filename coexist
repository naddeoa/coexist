#!/bin/bash
set -e

##
## Make sure the neccessary executables are on the path
##
needs(){
  echo "## Coexist needs $1 but its not on the path."
  exit 1
}
command -v adb > /dev/null 2>&1 || needs "adb"
command -v android > /dev/null 2>&1 || needs "android"



##
## Set the default ini file location. Can be overwritten by the
## first argument
##
DIR=`pwd`
INIFILE=./coexist.ini
if [[ $1 ]];then
  INIFILE=$1
  DIR="$PWD/`dirname $1`"
fi
BIN_DIR=$DIR/bin

##
## Helper function for parsing ini files
##

report(){
  echo "## $1"
}

VAL=
iniVal(){
  VAL=`sed -sn -e "s/.*;.*//" -e "s/[^;]*\s*$1\s*=\s*\(.*\)/\1/p" < $INIFILE`
}

requireVal(){
  VAL=`sed -sn -e "s/.*;.*//" -e "s/[^;]*\s*$1\s*=\s*\(.*\)/\1/p" < $INIFILE`
  [[ $VAL ]] || (report "$1 was blank in the coexist.ini, please fill it in." && exit 1)
}


quiet(){
#  eval "$@" 
  eval "$@" > /dev/null 2>&1
}


##
## Which modules to build
##
requireVal android;BUILD_ANDROID=$VAL
requireVal server;BUILD_SERVER=$VAL

##
## Get the necessary android values from the configuration file
##
requireVal name;NAME=$VAL
requireVal image;IMAGE=$DIR/$VAL
requireVal notification;NOTIFICATION=$DIR/$VAL
requireVal package;PACKAGE=$VAL
requireVal api;API=$VAL

##
## Get the necessary web values from the configuration file
##
requireVal version;VERSION=$VAL
requireVal user;USER=$VAL
requireVal pass;PASS=$VAL
requireVal db;DB=$VAL
requireVal host;HOST=$VAL
requireVal dbms;DBMS=$VAL
requireVal create_dir;CREATE=$DIR/$VAL
requireVal schema_dir;SCHEMA=$DIR/$VAL



##
## Create the bin dir
##
mkdir -p $BIN_DIR

##
## Download the most recent version from git and configure
## it to build an android application that points to your
## server, with the icons and name you specify. The source will
## be removed after and the apk will be in this directory.
##
build_android(){
  report
  cd $BIN_DIR
  report "Downloading the latest version of Coexist Android"
  rm -rf coexist-android
#  git clone git://github.com/naddeoa/coexist-android.git > /dev/null 2>&1
  quiet wget https://github.com/naddeoa/coexist-android/archive/master.zip 
  quiet unzip master.zip
  mv coexist-android-master coexist-android
  rm master.zip
  cd coexist-android
  report "Configuring Coexist Android according to $INIFILE"
  quiet ./configure  \
    -i "$IMAGE"  \
    -I "$NOTIFICATION"  \
    -n $NAME \
    -p $PACKAGE \
    -h $API 
  report "Compiling the Android application, this will take a few seconds."
  quiet make
  report "Copying apks to $BIN_DIR"
  cp bin/*.apk $BIN_DIR
}
if [[ $BUILD_ANDROID = "on" ]];then
  build_android
fi

##
## Configure the web stuff if its enabled in the ini file
##
build_server(){
  report
  cd $BIN_DIR
  report "Downloading the latest version of Coexist Server"
  rm -rf coexist-server
#  git clone git://github.com/naddeoa/coexist-server.git > /dev/null 2>&1
  quiet wget https://github.com/naddeoa/coexist-server/archive/master.zip
  quiet unzip master.zip
  mv coexist-server-master coexist-server
  rm master.zip
  cd coexist-server
  report "Configuring Coexist Android according to $INIFILE"
  ./configure \
    -v $VERSION \
    -u $USER \
    -p $PASS \
    -d $DB \
    -c $CREATE \
    -s $SCHEMA \
    -m $DBMS \
    -h $HOST
  report "Tarring the website to $BIN_DIR"
  tar -zcf $BIN_DIR/$NAME-web.tgz *
}
if [[ $BUILD_SERVER = "on" ]];then
  build_server
fi

##
## Scp the files to the server if a scp_to field was
## defined in the .ini file.
##
cd $DIR
iniVal scp_to;SCP=$VAL
iniVal scp_port
if [[ $VAL ]];then
  SCP_PORT="-P $VAL"
fi
if [[ $SCP ]];then
  report "Copying the files to your server so you can untar them."
  scp $SCP_PORT bin/*.apk bin/*tgz $SCP 
fi

